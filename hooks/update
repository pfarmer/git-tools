#!/usr/bin/python

#
# Copyright (C) 2009 Peter Farmer
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License version 2 for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

#
# From: http://book.git-scm.com/5_git_hooks.html
#
# This hook is invoked by 'git-receive-pack' on the remote repository, 
# which happens when a 'git-push' is done on a local repository. Just
# before updating the ref on the remote repository, the update hook is
# invoked. Its exit status determines the success or failure of the
# ref update.
#

#
# This hook checks that the user who is attempting to commit to the
# repository is allowed to do so. It does this based on the information
# in info/allowed-users, this file should look like this:
#
# refs/heads      pfarmer
# refs/heads/master jbloggs
# refs/heads/v1.0-bugfixes jbloggs
# refs/tags       pfarmer
#
# It expects 1 ref and one username per line, it will match the shortest
# matching ref, so refs/heads will match refs/heads/master.
#
# It will also (if configured to do so) allow users to push to
# refs/heads/USERNAME.
#
# See hooks.conf.
#

import sys
import logging
import os
import re
import grp
import ConfigParser

logging.basicConfig(level=logging.INFO)

logger = logging.getLogger("update")

argv = sys.argv[1:]

ref_name = argv[0]
old_object = argv[1]
new_object = argv[2]
GIT_DIR = os.environ["GIT_DIR"]
REPO_DIR = os.getcwd()
USERNAME = os.environ["LOGNAME"]

config = ConfigParser.ConfigParser()
config.read('%s/info/hooks.conf' % REPO_DIR)

logger.debug("REPO_DIR   = %s" % REPO_DIR)
logger.debug("USERNAME   = %s" % USERNAME)
logger.debug("ref name   = %s" % ref_name)
logger.debug("old object = %s" % old_object)
logger.debug("new object = %s" % new_object)

def Grant(message=None):
	if message == None:
		exit(0)	
	else:
		logger.info(message)
		exit(0)

def Deny(message=None):
	if message == None:
		exit(1)
	else:
		logger.error(message)
		exit(1)

if config.get('update', 'allow_user_branches') == "yes":
	# User branches allowed, do a quick check
	user_branch = "refs/heads/%s" % USERNAME
	if ref_name == user_branch:
		logger.info("Matched ref: %s against %s (user branch)" % (user_branch, ref_name))
		Grant("Matched user branch %s" % user_branch)
		

logger.debug("Checking allowed-users")
if os.path.exists("%s/info/allowed-users" % REPO_DIR):
	logger.debug("%s/info/allowed-users exists!" % REPO_DIR)

	# Read in allowed-users
	for line in open("%s/info/allowed-users" % REPO_DIR):
		line = line.strip()
		if re.match("^#.*$", line):
			pass
		else:		
			parts = line.split()
			logger.debug("Checking ref: %s against %s" % (parts[0], ref_name))
			if re.match("%s" % parts[0], ref_name):
				# We found a potential match
				logger.info("Matched ref: %s against %s" % (parts[0], ref_name))
				# now check the username
				logger.debug("Checking user: %s against %s" % (parts[1], USERNAME))
				if parts[1] == USERNAME:
					Grant("Matched username: %s against %s" % (parts[1], USERNAME))

logger.debug("Checking allowed groups")
if os.path.exists("%s/info/allowed-groups" % REPO_DIR):
	logger.debug("%s/info/allowed-groups exists" % REPO_DIR)
	
	# Read in allowed-groups
	for line in open("%s/info/allowed-groups" % REPO_DIR):
		line = line.strip()
		if re.match("^#.*$", line):
			pass
		else:
			parts = line.split()
			logger.debug("Checking ref: %s against %s" % (parts[0], ref_name))
			if re.match("%s" % parts[0], ref_name):
				# We found a potential match
				logger.info("Matched ref: %s against %s" % (parts[0], ref_name))
				# Now check the group
				logger.debug("Checking group: %s for %s" % (parts[1], USERNAME))

				group = grp.getgrnam(parts[1])

				for user in group[3]:
					if user == USERNAME:
						Grant("Matched group membership: %s in %s" % (USERNAME, parts[1]))

# Last line!
Deny("No more rules to check!")
